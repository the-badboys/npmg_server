// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model users {
  id            String          @id @default(uuid())
  email         String          @unique
  firstName     String
  lastName      String
  role          Role
  password      String
  createdAt     DateTime        @default(now())
  reports       reports[]
  notifications notifications[] @relation("OneToNotified")
}

model npmg {
  id             String      @id @default(uuid())
  name           String      @unique
  mother         String      @default("")
  father         String      @default("")
  family         String      @default("")
  gender         String      @default("male")
  dob            String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  isSilverBacked Boolean     @default(false)
  namers         namers[]
  reports        reports[]
  ceremonyId     String      @default("")
  ceremonies     ceremonies? @relation("npmgShouldAlwaysBeNamesInCeremny", fields: [ceremoniesId], references: [id])
  ceremoniesId   String?
}

model families {
  id          String @id @default(uuid())
  family_name String @unique
  leader      String @default("")
}

model namers {
  id          String     @id @default(uuid())
  fullname    String?
  gorilla     String
  ceremonyId  String
  comment     String
  isCompleted Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  npmg        npmg       @relation(fields: [gorilla], references: [id])
  ceremonies  ceremonies @relation(fields: [ceremonyId], references: [id])
}

model reports {
  id        String       @id @default(uuid())
  gorilla   String
  date      DateTime     @default(now())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  reporter  String
  lungs     reportStatus @default(NSA)
  heart     reportStatus @default(NSA)
  legs      reportStatus @default(NSA)
  head      reportStatus @default(NSA)
  eyes      reportStatus @default(NSA)
  stomach   reportStatus @default(NSA)
  users     users        @relation(fields: [reporter], references: [id])
  npmg      npmg         @relation(fields: [gorilla], references: [id])
}

model ceremonies {
  id            String   @id @default(uuid())
  ceremony_date DateTime
  created_at    DateTime @default(now())
  venue         String
  title         String
  description   String
  npmg          npmg[]   @relation("npmgShouldAlwaysBeNamesInCeremny")
  namers        namers[]
}

model tasks {
  id          String   @id @default(uuid())
  group       String
  family      String
  date        DateTime
  added_by    String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model attendance {
  id        String   @id @default(uuid())
  attendant String
  added_by  String
  isPresent Boolean  @default(true)
  date      DateTime
}

model notifications {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  isRead            Boolean          @default(false)
  updatedAt         DateTime         @default(now())
  notification_type NotificationType
  title             String
  message           String
  emailTo           String
  notifierId        users            @relation("OneToNotified", fields: [userId], references: [id])
  userId         String
}



model rangerGroups{
 id String @id @default(uuid())
 name String
 leaderId String
 created_at DateTime @default(now())
// users reference
}



enum NotificationType {
  REPORT_CHECKED
  ACCOUNT_UPDATED
  VERIFY_ACCOUNT
  NEW_GORRILLA
  ERROR
}

enum Role {
  USER
  ADMIN
  RANGER
  DOCTOR
}

enum reportStatus {
  NSA
  ASN
  SAN
}
